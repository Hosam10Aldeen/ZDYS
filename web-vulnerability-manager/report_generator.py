# report_generator.py
import pdfkit
import tempfile

def generate_pdf(results):
    """
    results: list of dict, her dict:
    {
      'scan_id': ..., 'timestamp': ..., 'target': ..., 'tool': ..., 
      'output': ... (string veya None), 
      'alerts': [...] (list) , 
      'cvss': float
    }
    Bu fonksiyon, HTML içeriği oluşturup PDF'e çevirir ve geçici dosya yolunu döner.
    """
    style = """
    <style>
      body { font-family: Arial, sans-serif; font-size: 12px; }
      h1, h2, h3 { color: #333; }
      table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
      th, td { border: 1px solid #ccc; padding: 4px; text-align: left; }
      th { background-color: #f2f2f2; }
      .critical { background-color: #c0392b; color: white; }
      .high     { background-color: #e67e22; color: white; }
      .medium   { background-color: #f1c40f; color: black; }
      .low      { background-color: #3498db; color: white; }
      .none     { background-color: #2ecc71; color: white; }
      .small-note { font-size: 10px; color: #666; }
      hr { border: none; border-top: 1px solid #ddd; margin: 20px 0; }
    </style>
    """
    html_content = "<html><head><meta charset='utf-8' />" + style + "</head><body>"
    html_content += "<h1>Tarama Raporu</h1>"

    last_scan_id = None
    for res in results:
        scan_id = res.get('scan_id')
        timestamp = res.get('timestamp')
        target = res.get('target')
        tool = res.get('tool', '').upper()
        output = res.get('output')
        alerts = res.get('alerts', [])
        cvss = res.get('cvss', 0.0)

        if scan_id != last_scan_id:
            html_content += f"<h2>Scan ID: {scan_id} - {timestamp}</h2>"
            html_content += f"<p><strong>Target:</strong> {target}</p>"
            last_scan_id = scan_id

        html_content += f"<h3>{tool} Sonuçları</h3>"
        # CVSS gösterimi
        level_class = 'none'
        try:
            if cvss >= 9.0:
                level_class = 'critical'
            elif cvss >= 7.0:
                level_class = 'high'
            elif cvss >= 5.0:
                level_class = 'medium'
            elif cvss >= 1.0:
                level_class = 'low'
            else:
                level_class = 'none'
        except:
            level_class = 'none'
        html_content += f"<p><strong>CVSS Skoru:</strong> <span class='{level_class}' style='padding:2px 6px; border-radius:4px;'>{cvss}</span></p>"

        if tool.lower() == 'zap':
            if not alerts:
                html_content += "<p class='small-note'>ZAP tarafından herhangi bir alert bulunamadı.</p>"
            else:
                html_content += "<table><thead><tr><th>Name</th><th>Risk</th><th>Confidence</th><th>Description</th><th>Solution</th></tr></thead><tbody>"
                for alert in alerts:
                    name = alert.get('name', '')
                    risk = alert.get('risk', '')
                    confidence = alert.get('confidence', '')
                    description = alert.get('description', '').replace('\r', '').replace('\n', '<br>')
                    solution = alert.get('solution', '').replace('\r', '').replace('\n', '<br>')
                    rl = risk.lower() if isinstance(risk, str) else ''
                    if 'high' in rl:
                        row_class = 'high'
                    elif 'medium' in rl:
                        row_class = 'medium'
                    elif 'low' in rl:
                        row_class = 'low'
                    elif 'critical' in rl:
                        row_class = 'critical'
                    else:
                        row_class = 'none'
                    html_content += (
                        f"<tr class='{row_class}'>"
                        f"<td>{name}</td>"
                        f"<td>{risk}</td>"
                        f"<td>{confidence}</td>"
                        f"<td>{description}</td>"
                        f"<td>{solution}</td>"
                        "</tr>"
                    )
                html_content += "</tbody></table>"
        else:
            if output is None:
                html_content += "<p class='small-note'>Çıktı mevcut değil.</p>"
            else:
                safe_output = str(output).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                html_content += f"<pre>{safe_output}</pre>"

        html_content += "<hr>"

    html_content += "</body></html>"

    try:
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
        pdfkit.from_string(html_content, temp_file.name)
        return temp_file.name
    except Exception as e:
        raise RuntimeError(f"PDF generation failed: {e}")
