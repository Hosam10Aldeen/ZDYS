# scheduler.py
import sqlite3
import json
import time
import traceback
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
from scanner_api_client import run_scan
from database_manager import DB_PATH, save_scan_result
from utils import normalize_output, calculate_cvss, calculate_cvss_from_alerts
from mailer import send_report_email

scheduler = BackgroundScheduler()
active_job_ids = set()

def get_schedules_from_db():
    schedules = []
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("SELECT id, target, tools, email, interval_minutes, enabled FROM schedules")
        rows = c.fetchall()
    except Exception as e:
        print("Error reading schedules table:", e)
        conn.close()
        return schedules
    conn.close()

    for row in rows:
        sid, target, tools_json, email, interval, enabled = row
        try:
            tools = json.loads(tools_json)
            if not isinstance(tools, list):
                raise ValueError
        except Exception:
            print(f"Invalid tools JSON for schedule id={sid}: {tools_json}. Atlanıyor.")
            continue

        if not target or not isinstance(interval, int) or interval <= 0:
            print(f"Skipping invalid schedule id={sid}: target={target}, interval={interval}")
            continue

        schedules.append({
            'id': sid,
            'target': target,
            'tools': tools,
            'email': email,
            'interval_minutes': interval,
            'enabled': enabled
        })
    return schedules

def run_scheduled_scan(schedule):
    sid = schedule['id']
    target = schedule['target']
    tools = schedule['tools']
    email = schedule.get('email')
    scan_id = int(time.time())
    print(f"[{datetime.now().isoformat()}] Running scheduled scan id={sid}, target={target}, tools={tools}")
    results = []

    for tool in tools:
        try:
            result = run_scan(tool, target)
        except Exception as e:
            print(f"Error calling run_scan for tool={tool}, target={target}: {e}")
            traceback.print_exc()
            result = {'tool': tool, 'error': f"Exception in run_scan: {e}"}

        if result.get('error'):
            save_scan_result(scan_id, target, tool, output=None, alerts_json=None, cvss=0.0)
            results.append({"tool": tool, "output": None, "alerts": [], "cvss": 0.0, "error": result.get('error')})
            continue

        if tool.lower() == 'zap':
            alerts = result.get('alerts', [])
            cvss = calculate_cvss_from_alerts(alerts)
            save_scan_result(scan_id, target, 'zap', output=None, alerts_json=json.dumps(alerts, ensure_ascii=False), cvss=cvss)
            results.append({"tool": "zap", "alerts": alerts, "cvss": cvss})
        else:
            out = normalize_output(result.get('output'))
            cvss = calculate_cvss(out)
            save_scan_result(scan_id, target, tool, output=out, alerts_json=None, cvss=cvss)
            results.append({"tool": tool, "output": out, "cvss": cvss})

    if email:
        try:
            print(f"[{datetime.now().isoformat()}] Sending email to {email} for schedule id={sid}")
            send_report_email(email, results)
        except Exception as e:
            print(f"Error sending email for schedule id={sid}, email={email}: {e}")
            traceback.print_exc()

def sync_jobs():
    global active_job_ids
    schedules = get_schedules_from_db()
    current_job_ids = set()

    for sched in schedules:
        job_id = f"schedule_{sched['id']}"
        current_job_ids.add(job_id)

        if sched['enabled'] == 1 and job_id not in active_job_ids:
            # Yeni job ekle
            scheduler.add_job(
                run_scheduled_scan,
                trigger=IntervalTrigger(minutes=sched['interval_minutes']),
                args=[sched],
                id=job_id,
                name=f"Schedule {sched['id']} target={sched['target']}",
                replace_existing=True
            )
            print(f"Added job id={job_id}")
        elif sched['enabled'] == 0 and job_id in active_job_ids:
            # Pasif yapılmış job'ı kaldır
            try:
                scheduler.remove_job(job_id)
                print(f"Removed job id={job_id}")
            except Exception as e:
                print(f"Failed to remove job {job_id}: {e}")

    # Güncel aktif job listesi
    active_job_ids = set(job.id for job in scheduler.get_jobs())

def main():
    print("Starting dynamic scheduler...")
    scheduler.add_job(sync_jobs, trigger=IntervalTrigger(seconds=60), id="sync_job", replace_existing=True)
    sync_jobs()  # Başlangıçta hemen bir defa çalıştır
    scheduler.start()

    try:
        while True:
            time.sleep(10)
    except (KeyboardInterrupt, SystemExit):
        print("Scheduler durduruluyor...")
        scheduler.shutdown()

if __name__ == '__main__':
    main()
