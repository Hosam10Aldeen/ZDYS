## 🧐 Flask Arayüzünden Tarama Başlatma ve Diğer Özellikler (app.py)
# app.py
import time
from flask import Flask, render_template, request, redirect, url_for, session, send_file
from scanner_api_client import run_scan
from database_manager import get_last_scan_results, save_scan_result, get_all_results
from report_generator import generate_pdf
from utils import normalize_output, calculate_cvss
from auth import login_required, login_user, logout_user
from mailer import send_report_email
import os
from database_manager import init_db
from utils import level_class
from database_manager import init_db, save_scan_result, get_last_scan_results, get_all_results
from utils import normalize_output, calculate_cvss, calculate_cvss_from_alerts, level_class
import json

init_db()
app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'super_secret_key')  # üretimde environment değişkeni kullan
# Jinja’ya level_class fonksiyonunu ekle:
app.jinja_env.globals.update(level_class=level_class)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if login_user(username, password):
            return redirect(url_for('index'))
    return render_template('login.html')
@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('login'))
# app.py içindeki index view revize:
@app.route('/', methods=['GET', 'POST'])
@login_required
def index():
    if request.method == 'POST':
        url = request.form['url']
        selected_tools = request.form.getlist('tools')
        email = request.form.get('email')
        results = []
        scan_id = int(time.time())
        # Kullanıcıya bilgi vermek istersen flash kullan:
        # flash("Taramalar başlatıldı. Lütfen bekleyin; bazı araçlar uzun sürebilir.")
        for tool in selected_tools:
            result = run_scan(tool, url)
            if result.get('error'):
                results.append({"tool": tool, "output": None, "alerts": [], "cvss": 0.0, "error": result.get('error')})
                # İstersen veritabanına hata kaydı da ekle; burada eklemezsen save_scan_result çağrılmaz
                continue

            # Başarılı yanıt
            if tool.lower() == 'zap':
                alerts = result.get('alerts', [])
                cvss = calculate_cvss_from_alerts(alerts)
                # JSON string sakla
                save_scan_result(scan_id, url, 'zap', output=None, alerts_json=json.dumps(alerts, ensure_ascii=False), cvss=cvss)
                results.append({"tool": "zap", "alerts": alerts, "cvss": cvss})
            else:
                # Diğer araçlar: metin çıktısı
                out = normalize_output(result.get('output'))
                cvss = calculate_cvss(out)
                save_scan_result(scan_id, url, tool, output=out, alerts_json=None, cvss=cvss)
                results.append({"tool": tool, "output": out, "cvss": cvss})
        if email:
            send_report_email(email, results)
        return render_template('report.html', results=results)
    return render_template('index.html')


@app.route('/rapor/pdf')
@login_required
def download_pdf():
    results = get_all_results()
    filepath = generate_pdf(results)
    return send_file(filepath, as_attachment=True)

@app.route('/rapor/pdf/last')
@login_required
def download_last_pdf():
    results = get_last_scan_results()  # You need to create this function
    filepath = generate_pdf(results)
    return send_file(filepath, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)