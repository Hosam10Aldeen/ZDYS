# utils.py
import json

def normalize_output(output):
    """
    Diğer araçlar (nmap, nikto, wpscan) için: output genelde string.
    Eğer liste halinde gelirse (nadiren), satırları birleştir.
    Satır sonlarını HTML <br> veya <pre> içinde gösterim tercihe bağlı.
    Burada frontend'te <pre> ile gösterileceği varsayılarak ham string döner.
    """
    if isinstance(output, list):
        output = '\n'.join(str(item) for item in output)
    if output is None:
        return ''
    return str(output)

def calculate_cvss(text_output):
    """
    Diğer araçlar için basit heuristic: output metninde 'critical', 'high', 'medium', 'low' kelimelerine bakarak CVSS atar.
    """
    txt = text_output.lower() if text_output else ''
    if 'critical' in txt:
        return 9.8
    elif 'high' in txt:
        return 7.5
    elif 'medium' in txt:
        return 5.0
    elif 'low' in txt:
        return 2.5
    else:
        return 0.0

def calculate_cvss_from_alerts(alerts):
    """
    ZAP JSON alert listesi için: her alert dict içinde 'risk' alanı var (High/Medium/Low/Informational vb.).
    En yüksek risk seviyesine göre CVSS ata.
    """
    max_score = 0.0
    for alert in alerts:
        risk = alert.get('risk', '')
        if not isinstance(risk, str):
            continue
        r = risk.lower()
        if 'critical' in r:
            score = 9.8
        elif 'high' in r:
            score = 7.5
        elif 'medium' in r:
            score = 5.0
        elif 'low' in r:
            score = 2.5
        else:
            score = 0.0
        if score > max_score:
            max_score = score
    return max_score

def level_class(cvss):
    """
    Jinja template'te kullanılmak üzere: CVSS değerine göre CSS sınıfı döner.
    Kullanım: {{ level_class(result.cvss) }}.
    Flask app içinde:
        app.jinja_env.globals.update(level_class=level_class)
    """
    try:
        cv = float(cvss)
    except:
        return 'none'
    if cv >= 9.0:
        return 'critical'
    elif cv >= 7.0:
        return 'high'
    elif cv >= 5.0:
        return 'medium'
    elif cv >= 1.0:
        return 'low'
    else:
        return 'none'
