## üóÇÔ∏è Tarama Sonu√ßlarƒ±nƒ± SQLite Veritabanƒ±na Kaydetme (`database_manager.py`)
# database_manager.py
import sqlite3

def save_scan_result(scan_id, target, tool, output,cvss):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS scans (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    scan_id INTEGER,
                    target TEXT,
                    tool TEXT,
                    output TEXT,
                    cvss T REAL
                )''')
    
# When saving results, generate a new scan_id (e.g., timestamp)
    # Insert rows like this:
    c.execute("INSERT INTO scans (scan_id, target, tool, output, cvss) VALUES (?, ?, ?, ?, ?)", (scan_id, target, tool, output, cvss))
    conn.commit()
    conn.close()

def get_all_results():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT target, tool, output, cvss FROM scans")
    rows = c.fetchall()
    conn.close()
    return [{'target': r[0], 'tool': r[1], 'output': r[2], 'cvss': r[3]} for r in rows]

def get_last_scan_results():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT MAX(scan_id) FROM scans")
    last_scan_id = c.fetchone()[0]
    c.execute("SELECT target, tool, output, cvss FROM scans WHERE scan_id = ?", (last_scan_id,))
    rows = c.fetchall()
    conn.close()
    return [{'target': r[0], 'tool': r[1], 'output': r[2], 'cvss': r[3]} for r in rows]

 ##########################################