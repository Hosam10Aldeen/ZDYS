import re
import requests
from time import sleep

NVD_API_KEY = "579e0c46-7197-4850-bc31-03bb01fc291f"
NVD_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

def query_nvd_for_cve(query: str):
    headers = {
        "apiKey": NVD_API_KEY
    }
    params = {
        "keywordSearch": query,
        "resultsPerPage": 1
    }
    try:
        resp = requests.get(NVD_BASE_URL, headers=headers, params=params, timeout=15)
        resp.raise_for_status()
        result = resp.json()
        vulnerabilities = result.get("vulnerabilities", [])
        if vulnerabilities:
            vuln = vulnerabilities[0]["cve"]
            cvss = vuln.get("metrics", {}).get("cvssMetricV31", [{}])[0].get("cvssData", {})
            return {
                "cve_id": vuln.get("id"),
                "title": vuln["descriptions"][0]["value"],
                "risk_level": cvss.get("baseScore", "Unknown"),
                "remediation": "Refer to vendor/NVD references for mitigation steps."
            }
    except Exception as e:
        print(f"[!] NVD sorgu hatasÄ±: {e}")
    return {
        "cve_id": None,
        "title": query,
        "risk_level": "Unknown",
        "remediation": "Manual analysis required."
    }

def parse_nikto_output_generic(nikto_output: str):
    vulnerabilities = []
    for line in nikto_output.splitlines():
        line = line.strip()
        if line.startswith("+") and not line.startswith("+-") and "Target" not in line and "Start Time" not in line:
            finding = re.sub(r"^\+\s*", "", line).strip()
            if len(finding.split()) < 4:
                continue
            details = query_nvd_for_cve(finding)
            vulnerabilities.append({
                "title": details["title"],
                "cve_id": details["cve_id"],
                "risk_level": details["risk_level"],
                "remediation": details["remediation"]
            })
            sleep(1.5)
    return vulnerabilities
