import re
import requests

NVD_API_KEY = "579e0c46-7197-4850-bc31-03bb01fc291f"
NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

def query_nvd_for_cve(cve_id):
    headers = {
        "apiKey": NVD_API_KEY
    }
    params = {
        "cveId": cve_id
    }
    try:
        response = requests.get(NVD_API_URL, headers=headers, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            cve_items = data.get("vulnerabilities", [])
            if cve_items:
                cve = cve_items[0]['cve']
                description = cve['descriptions'][0]['value']
                remediation = cve.get("configurations", [])
                cvss_data = cve.get("metrics", {}).get("cvssMetricV31", [{}])[0]
                base_score = cvss_data.get("cvssData", {}).get("baseScore", 0.0)
                severity = cvss_data.get("cvssData", {}).get("baseSeverity", "NONE")
                return {
                    "cve_id": cve_id,
                    "description": description,
                    "cvss": base_score,
                    "severity": severity.lower(),
                    "remediation": remediation or "Çözüm önerisi sağlanmadı."
                }
    except Exception as e:
        print(f"[!] NVD API hatası: {e}")
    return {
        "cve_id": cve_id,
        "description": "CVE detayları alınamadı.",
        "cvss": 0.0,
        "severity": "none",
        "remediation": "Çözüm önerisi yok."
    }

def parse_wpscan_output_generic(output):
    cve_pattern = re.compile(r'(CVE-\d{4}-\d{4,7})', re.IGNORECASE)
    findings = []
    seen = set()

    for match in cve_pattern.finditer(output):
        cve_id = match.group(1).upper()
        if cve_id not in seen:
            seen.add(cve_id)
            cve_info = query_nvd_for_cve(cve_id)
            findings.append(cve_info)

    return findings
